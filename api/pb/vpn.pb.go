// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.1
// source: vpn.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VPNProto int32

const (
	VPNProto_NOPREF VPNProto = 0
	VPNProto_UDP    VPNProto = 1
	VPNProto_TCP    VPNProto = 2
)

// Enum value maps for VPNProto.
var (
	VPNProto_name = map[int32]string{
		0: "NOPREF",
		1: "UDP",
		2: "TCP",
	}
	VPNProto_value = map[string]int32{
		"NOPREF": 0,
		"UDP":    1,
		"TCP":    2,
	}
)

func (x VPNProto) Enum() *VPNProto {
	p := new(VPNProto)
	*p = x
	return p
}

func (x VPNProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VPNProto) Descriptor() protoreflect.EnumDescriptor {
	return file_vpn_proto_enumTypes[0].Descriptor()
}

func (VPNProto) Type() protoreflect.EnumType {
	return &file_vpn_proto_enumTypes[0]
}

func (x VPNProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VPNProto.Descriptor instead.
func (VPNProto) EnumDescriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{0}
}

type VPNLZOPref int32

const (
	VPNLZOPref_USE_LZO_NOPREF  VPNLZOPref = 0
	VPNLZOPref_USE_LZO_ENABLE  VPNLZOPref = 1
	VPNLZOPref_USE_LZO_DISABLE VPNLZOPref = 3
)

// Enum value maps for VPNLZOPref.
var (
	VPNLZOPref_name = map[int32]string{
		0: "USE_LZO_NOPREF",
		1: "USE_LZO_ENABLE",
		3: "USE_LZO_DISABLE",
	}
	VPNLZOPref_value = map[string]int32{
		"USE_LZO_NOPREF":  0,
		"USE_LZO_ENABLE":  1,
		"USE_LZO_DISABLE": 3,
	}
)

func (x VPNLZOPref) Enum() *VPNLZOPref {
	p := new(VPNLZOPref)
	*p = x
	return p
}

func (x VPNLZOPref) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VPNLZOPref) Descriptor() protoreflect.EnumDescriptor {
	return file_vpn_proto_enumTypes[1].Descriptor()
}

func (VPNLZOPref) Type() protoreflect.EnumType {
	return &file_vpn_proto_enumTypes[1]
}

func (x VPNLZOPref) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VPNLZOPref.Descriptor instead.
func (VPNLZOPref) EnumDescriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{1}
}

type VPNStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VPNStatusRequest) Reset() {
	*x = VPNStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPNStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPNStatusRequest) ProtoMessage() {}

func (x *VPNStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPNStatusRequest.ProtoReflect.Descriptor instead.
func (*VPNStatusRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{0}
}

type VPNInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname         string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port             string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	ProtoPref        VPNProto `protobuf:"varint,3,opt,name=proto_pref,json=protoPref,proto3,enum=pb.VPNProto" json:"proto_pref,omitempty"`
	IpBlock          string   `protobuf:"bytes,4,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
	Dns              string   `protobuf:"bytes,5,opt,name=dns,proto3" json:"dns,omitempty"`
	KeepalivePeriod  string   `protobuf:"bytes,6,opt,name=keepalive_period,json=keepalivePeriod,proto3" json:"keepalive_period,omitempty"`
	KeepaliveTimeout string   `protobuf:"bytes,7,opt,name=keepalive_timeout,json=keepaliveTimeout,proto3" json:"keepalive_timeout,omitempty"`
	UseLzo           bool     `protobuf:"varint,8,opt,name=use_lzo,json=useLzo,proto3" json:"use_lzo,omitempty"`
}

func (x *VPNInitRequest) Reset() {
	*x = VPNInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPNInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPNInitRequest) ProtoMessage() {}

func (x *VPNInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPNInitRequest.ProtoReflect.Descriptor instead.
func (*VPNInitRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{1}
}

func (x *VPNInitRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *VPNInitRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *VPNInitRequest) GetProtoPref() VPNProto {
	if x != nil {
		return x.ProtoPref
	}
	return VPNProto_NOPREF
}

func (x *VPNInitRequest) GetIpBlock() string {
	if x != nil {
		return x.IpBlock
	}
	return ""
}

func (x *VPNInitRequest) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *VPNInitRequest) GetKeepalivePeriod() string {
	if x != nil {
		return x.KeepalivePeriod
	}
	return ""
}

func (x *VPNInitRequest) GetKeepaliveTimeout() string {
	if x != nil {
		return x.KeepaliveTimeout
	}
	return ""
}

func (x *VPNInitRequest) GetUseLzo() bool {
	if x != nil {
		return x.UseLzo
	}
	return false
}

type VPNUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpBlock string     `protobuf:"bytes,1,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
	Dns     string     `protobuf:"bytes,2,opt,name=dns,proto3" json:"dns,omitempty"`
	LzoPref VPNLZOPref `protobuf:"varint,3,opt,name=lzo_pref,json=lzoPref,proto3,enum=pb.VPNLZOPref" json:"lzo_pref,omitempty"`
}

func (x *VPNUpdateRequest) Reset() {
	*x = VPNUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPNUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPNUpdateRequest) ProtoMessage() {}

func (x *VPNUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPNUpdateRequest.ProtoReflect.Descriptor instead.
func (*VPNUpdateRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{2}
}

func (x *VPNUpdateRequest) GetIpBlock() string {
	if x != nil {
		return x.IpBlock
	}
	return ""
}

func (x *VPNUpdateRequest) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *VPNUpdateRequest) GetLzoPref() VPNLZOPref {
	if x != nil {
		return x.LzoPref
	}
	return VPNLZOPref_USE_LZO_NOPREF
}

type VPNRestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VPNRestartRequest) Reset() {
	*x = VPNRestartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPNRestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPNRestartRequest) ProtoMessage() {}

func (x *VPNRestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPNRestartRequest.ProtoReflect.Descriptor instead.
func (*VPNRestartRequest) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{3}
}

type VPNStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Hostname     string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port         string `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	Cert         string `protobuf:"bytes,5,opt,name=cert,proto3" json:"cert,omitempty"`
	CaCert       string `protobuf:"bytes,6,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	Net          string `protobuf:"bytes,7,opt,name=net,proto3" json:"net,omitempty"`
	Mask         string `protobuf:"bytes,8,opt,name=mask,proto3" json:"mask,omitempty"`
	CreatedAt    string `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Proto        string `protobuf:"bytes,10,opt,name=proto,proto3" json:"proto,omitempty"`
	Dns          string `protobuf:"bytes,11,opt,name=dns,proto3" json:"dns,omitempty"`
	ExpiresAt    string `protobuf:"bytes,12,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	CaExpiresAt  string `protobuf:"bytes,13,opt,name=ca_expires_at,json=caExpiresAt,proto3" json:"ca_expires_at,omitempty"`
	UseLzo       bool   `protobuf:"varint,14,opt,name=use_lzo,json=useLzo,proto3" json:"use_lzo,omitempty"`
}

func (x *VPNStatusResponse) Reset() {
	*x = VPNStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPNStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPNStatusResponse) ProtoMessage() {}

func (x *VPNStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPNStatusResponse.ProtoReflect.Descriptor instead.
func (*VPNStatusResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{4}
}

func (x *VPNStatusResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VPNStatusResponse) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *VPNStatusResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *VPNStatusResponse) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *VPNStatusResponse) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *VPNStatusResponse) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *VPNStatusResponse) GetNet() string {
	if x != nil {
		return x.Net
	}
	return ""
}

func (x *VPNStatusResponse) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *VPNStatusResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *VPNStatusResponse) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *VPNStatusResponse) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *VPNStatusResponse) GetExpiresAt() string {
	if x != nil {
		return x.ExpiresAt
	}
	return ""
}

func (x *VPNStatusResponse) GetCaExpiresAt() string {
	if x != nil {
		return x.CaExpiresAt
	}
	return ""
}

func (x *VPNStatusResponse) GetUseLzo() bool {
	if x != nil {
		return x.UseLzo
	}
	return false
}

type VPNInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VPNInitResponse) Reset() {
	*x = VPNInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPNInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPNInitResponse) ProtoMessage() {}

func (x *VPNInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPNInitResponse.ProtoReflect.Descriptor instead.
func (*VPNInitResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{5}
}

type VPNUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VPNUpdateResponse) Reset() {
	*x = VPNUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPNUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPNUpdateResponse) ProtoMessage() {}

func (x *VPNUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPNUpdateResponse.ProtoReflect.Descriptor instead.
func (*VPNUpdateResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{6}
}

type VPNRestartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VPNRestartResponse) Reset() {
	*x = VPNRestartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPNRestartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPNRestartResponse) ProtoMessage() {}

func (x *VPNRestartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPNRestartResponse.ProtoReflect.Descriptor instead.
func (*VPNRestartResponse) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{7}
}

var File_vpn_proto protoreflect.FileDescriptor

var file_vpn_proto_rawDesc = []byte{
	0x0a, 0x09, 0x76, 0x70, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a,
	0x10, 0x56, 0x50, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x8b, 0x02, 0x0a, 0x0e, 0x56, 0x50, 0x4e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x50,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x65,
	0x66, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x7a,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x4c, 0x7a, 0x6f, 0x22,
	0x6a, 0x0a, 0x10, 0x56, 0x50, 0x4e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x73,
	0x12, 0x29, 0x0a, 0x08, 0x6c, 0x7a, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x50, 0x4e, 0x4c, 0x5a, 0x4f, 0x50, 0x72,
	0x65, 0x66, 0x52, 0x07, 0x6c, 0x7a, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x22, 0x13, 0x0a, 0x11, 0x56,
	0x50, 0x4e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xf2, 0x02, 0x0a, 0x11, 0x56, 0x50, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x61, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x5f, 0x6c, 0x7a, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x4c, 0x7a, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x56, 0x50, 0x4e, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x56, 0x50, 0x4e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x56, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0x28, 0x0a, 0x08, 0x56, 0x50, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x50, 0x52, 0x45, 0x46, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55,
	0x44, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x02, 0x2a, 0x49, 0x0a,
	0x0a, 0x56, 0x50, 0x4e, 0x4c, 0x5a, 0x4f, 0x50, 0x72, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x53, 0x45, 0x5f, 0x4c, 0x5a, 0x4f, 0x5f, 0x4e, 0x4f, 0x50, 0x52, 0x45, 0x46, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x5a, 0x4f, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x5a, 0x4f, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x32, 0xda, 0x02, 0x0a, 0x0a, 0x56, 0x50, 0x4e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x50, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x50, 0x4e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x70, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e,
	0x69, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x50, 0x4e, 0x49, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x50, 0x4e, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x70, 0x6e,
	0x2f, 0x69, 0x6e, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x50, 0x4e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x50,
	0x4e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x70, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x55,
	0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x50, 0x4e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x70, 0x6e, 0x2f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x64, 0x2f, 0x6f, 0x76, 0x70, 0x6d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vpn_proto_rawDescOnce sync.Once
	file_vpn_proto_rawDescData = file_vpn_proto_rawDesc
)

func file_vpn_proto_rawDescGZIP() []byte {
	file_vpn_proto_rawDescOnce.Do(func() {
		file_vpn_proto_rawDescData = protoimpl.X.CompressGZIP(file_vpn_proto_rawDescData)
	})
	return file_vpn_proto_rawDescData
}

var file_vpn_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_vpn_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_vpn_proto_goTypes = []interface{}{
	(VPNProto)(0),              // 0: pb.VPNProto
	(VPNLZOPref)(0),            // 1: pb.VPNLZOPref
	(*VPNStatusRequest)(nil),   // 2: pb.VPNStatusRequest
	(*VPNInitRequest)(nil),     // 3: pb.VPNInitRequest
	(*VPNUpdateRequest)(nil),   // 4: pb.VPNUpdateRequest
	(*VPNRestartRequest)(nil),  // 5: pb.VPNRestartRequest
	(*VPNStatusResponse)(nil),  // 6: pb.VPNStatusResponse
	(*VPNInitResponse)(nil),    // 7: pb.VPNInitResponse
	(*VPNUpdateResponse)(nil),  // 8: pb.VPNUpdateResponse
	(*VPNRestartResponse)(nil), // 9: pb.VPNRestartResponse
}
var file_vpn_proto_depIdxs = []int32{
	0, // 0: pb.VPNInitRequest.proto_pref:type_name -> pb.VPNProto
	1, // 1: pb.VPNUpdateRequest.lzo_pref:type_name -> pb.VPNLZOPref
	2, // 2: pb.VPNService.Status:input_type -> pb.VPNStatusRequest
	3, // 3: pb.VPNService.Init:input_type -> pb.VPNInitRequest
	4, // 4: pb.VPNService.Update:input_type -> pb.VPNUpdateRequest
	5, // 5: pb.VPNService.Restart:input_type -> pb.VPNRestartRequest
	6, // 6: pb.VPNService.Status:output_type -> pb.VPNStatusResponse
	7, // 7: pb.VPNService.Init:output_type -> pb.VPNInitResponse
	8, // 8: pb.VPNService.Update:output_type -> pb.VPNUpdateResponse
	9, // 9: pb.VPNService.Restart:output_type -> pb.VPNRestartResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_vpn_proto_init() }
func file_vpn_proto_init() {
	if File_vpn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vpn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPNStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPNInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPNUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPNRestartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPNStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPNInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPNUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPNRestartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vpn_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vpn_proto_goTypes,
		DependencyIndexes: file_vpn_proto_depIdxs,
		EnumInfos:         file_vpn_proto_enumTypes,
		MessageInfos:      file_vpn_proto_msgTypes,
	}.Build()
	File_vpn_proto = out.File
	file_vpn_proto_rawDesc = nil
	file_vpn_proto_goTypes = nil
	file_vpn_proto_depIdxs = nil
}
